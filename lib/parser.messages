program: CONST IDENT COLON IDENT EQ CRYPTO DOT WITH
##
## Ends in an error in state: 110.
##
## expr -> CRYPTO DOT . IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## CRYPTO DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ CRYPTO WITH
##
## Ends in an error in state: 109.
##
## expr -> CRYPTO . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## CRYPTO
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ IF UNIT THEN UNIT ELSE UNIT VAR
##
## Ends in an error in state: 151.
##
## expr -> expr . ADD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . SUB expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DIV expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MUL expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MOD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . AND expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . OR expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . EQEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . NEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> IF expr THEN expr ELSE expr . [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ IF UNIT THEN UNIT ELSE WITH
##
## Ends in an error in state: 150.
##
## expr -> IF expr THEN expr ELSE . expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ IF UNIT THEN UNIT WITH
##
## Ends in an error in state: 114.
##
## expr -> expr . ADD expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ ELSE DOT DIV AND ADD ]
## expr -> expr . SUB expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ ELSE DOT DIV AND ADD ]
## expr -> expr . DIV expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ ELSE DOT DIV AND ADD ]
## expr -> expr . MUL expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ ELSE DOT DIV AND ADD ]
## expr -> expr . MOD expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ ELSE DOT DIV AND ADD ]
## expr -> expr . AND expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ ELSE DOT DIV AND ADD ]
## expr -> expr . OR expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ ELSE DOT DIV AND ADD ]
## expr -> expr . LT expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ ELSE DOT DIV AND ADD ]
## expr -> expr . LTE expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ ELSE DOT DIV AND ADD ]
## expr -> expr . GT expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ ELSE DOT DIV AND ADD ]
## expr -> expr . GTE expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ ELSE DOT DIV AND ADD ]
## expr -> expr . EQEQ expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ ELSE DOT DIV AND ADD ]
## expr -> expr . NEQ expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ ELSE DOT DIV AND ADD ]
## expr -> IF expr THEN expr . ELSE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ ELSE DOT DIV AND ADD ]
## expr -> expr . DOT IDENT [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ ELSE DOT DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ IF UNIT THEN WITH
##
## Ends in an error in state: 113.
##
## expr -> IF expr THEN . expr ELSE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ IF UNIT WITH
##
## Ends in an error in state: 112.
##
## expr -> expr . ADD expr [ THEN SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . SUB expr [ THEN SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DIV expr [ THEN SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MUL expr [ THEN SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MOD expr [ THEN SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . AND expr [ THEN SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . OR expr [ THEN SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LT expr [ THEN SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LTE expr [ THEN SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GT expr [ THEN SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GTE expr [ THEN SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . EQEQ expr [ THEN SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . NEQ expr [ THEN SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> IF expr . THEN expr ELSE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ THEN SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DOT IDENT [ THEN SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## IF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ IF WITH
##
## Ends in an error in state: 106.
##
## expr -> IF . expr THEN expr ELSE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LBRACE IDENT EQ FALSE SEMICOLON WITH
##
## Ends in an error in state: 156.
##
## separated_nonempty_list(SEMICOLON,erec_element) -> erec_element SEMICOLON . separated_nonempty_list(SEMICOLON,erec_element) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## erec_element SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LBRACE IDENT EQ UNIT WITH
##
## Ends in an error in state: 152.
##
## erec_element -> IDENT EQ expr . [ SEMICOLON RBRACE ]
## expr -> expr . ADD expr [ SUB SEMICOLON RBRACE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . SUB expr [ SUB SEMICOLON RBRACE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DIV expr [ SUB SEMICOLON RBRACE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MUL expr [ SUB SEMICOLON RBRACE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MOD expr [ SUB SEMICOLON RBRACE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . AND expr [ SUB SEMICOLON RBRACE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . OR expr [ SUB SEMICOLON RBRACE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LT expr [ SUB SEMICOLON RBRACE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LTE expr [ SUB SEMICOLON RBRACE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GT expr [ SUB SEMICOLON RBRACE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GTE expr [ SUB SEMICOLON RBRACE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . EQEQ expr [ SUB SEMICOLON RBRACE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . NEQ expr [ SUB SEMICOLON RBRACE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SUB SEMICOLON RBRACE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DOT IDENT [ SUB SEMICOLON RBRACE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## IDENT EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LBRACE IDENT EQ WITH
##
## Ends in an error in state: 104.
##
## erec_element -> IDENT EQ . expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LBRACE IDENT WITH
##
## Ends in an error in state: 103.
##
## erec_element -> IDENT . EQ expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LBRACE WITH
##
## Ends in an error in state: 102.
##
## expr -> LBRACE . separated_nonempty_list(SEMICOLON,erec_element) RBRACE [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LPAR IDENT COLON IDENT RPAR LAMBDAB LPAR UNIT WITH
##
## Ends in an error in state: 163.
##
## expr -> LPAR separated_nonempty_list(COMMA,parameter) RPAR LAMBDAB LPAR expr . RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . ADD expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . SUB expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DIV expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MUL expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MOD expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . AND expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . OR expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LT expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LTE expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GT expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GTE expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . EQEQ expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . NEQ expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DOT IDENT [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAR separated_nonempty_list(COMMA,parameter) RPAR LAMBDAB LPAR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LPAR IDENT COLON IDENT RPAR LAMBDAB LPAR WITH
##
## Ends in an error in state: 162.
##
## expr -> LPAR separated_nonempty_list(COMMA,parameter) RPAR LAMBDAB LPAR . expr RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAR separated_nonempty_list(COMMA,parameter) RPAR LAMBDAB LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LPAR IDENT COLON IDENT RPAR LAMBDAB WITH
##
## Ends in an error in state: 161.
##
## expr -> LPAR separated_nonempty_list(COMMA,parameter) RPAR LAMBDAB . LPAR expr RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAR separated_nonempty_list(COMMA,parameter) RPAR LAMBDAB
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LPAR IDENT COLON IDENT RPAR WITH
##
## Ends in an error in state: 160.
##
## expr -> LPAR separated_nonempty_list(COMMA,parameter) RPAR . LAMBDAB LPAR expr RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAR separated_nonempty_list(COMMA,parameter) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LPAR IDENT WITH
##
## Ends in an error in state: 158.
##
## expr -> IDENT . [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## parameter -> IDENT . COLON type_sig [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LPAR UNIT COLON IDENT WITH
##
## Ends in an error in state: 171.
##
## expr -> LPAR expr COLON type_sig . RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## type_expr -> type_sig . [ CONTRACT CONT ]
## type_sig -> type_sig . LAMBDA type_sig [ RPAR LAMBDA CONTRACT CONT ]
##
## The known suffix of the stack is as follows:
## LPAR expr COLON type_sig
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LPAR UNIT COLON WITH
##
## Ends in an error in state: 170.
##
## expr -> LPAR expr COLON . type_sig RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAR expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LPAR UNIT COMMA UNIT RSQUARE
##
## Ends in an error in state: 168.
##
## expr -> LPAR expr COMMA separated_nonempty_list(COMMA,expr) . RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAR expr COMMA separated_nonempty_list(COMMA,expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 133, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LPAR UNIT COMMA WITH
##
## Ends in an error in state: 167.
##
## expr -> LPAR expr COMMA . separated_nonempty_list(COMMA,expr) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAR expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LPAR UNIT WITH
##
## Ends in an error in state: 165.
##
## expr -> LPAR expr . COMMA separated_nonempty_list(COMMA,expr) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . ADD expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . SUB expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DIV expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MUL expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MOD expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . AND expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . OR expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LT expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LTE expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GT expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GTE expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . EQEQ expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . NEQ expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> LPAR expr . RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> LPAR expr . COLON type_sig RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DOT IDENT [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LPAR WITH
##
## Ends in an error in state: 101.
##
## expr -> LPAR . expr COMMA separated_nonempty_list(COMMA,expr) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> LPAR . separated_nonempty_list(COMMA,parameter) RPAR LAMBDAB LPAR expr RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> LPAR . expr RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> LPAR . expr COLON type_sig RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LSQUARE LPAR UNIT COLON FALSE RPAR COMMA LPAR UNIT COLON WITH
##
## Ends in an error in state: 188.
##
## emap_element -> LPAR expr COLON . expr RPAR [ RSQUARE COMMA ]
##
## The known suffix of the stack is as follows:
## LPAR expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LSQUARE LPAR UNIT COLON FALSE RPAR COMMA LPAR UNIT WITH
##
## Ends in an error in state: 187.
##
## emap_element -> LPAR expr . COLON expr RPAR [ RSQUARE COMMA ]
## expr -> expr . ADD expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COLON AND ADD ]
## expr -> expr . SUB expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COLON AND ADD ]
## expr -> expr . DIV expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COLON AND ADD ]
## expr -> expr . MUL expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COLON AND ADD ]
## expr -> expr . MOD expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COLON AND ADD ]
## expr -> expr . AND expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COLON AND ADD ]
## expr -> expr . OR expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COLON AND ADD ]
## expr -> expr . LT expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COLON AND ADD ]
## expr -> expr . LTE expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COLON AND ADD ]
## expr -> expr . GT expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COLON AND ADD ]
## expr -> expr . GTE expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COLON AND ADD ]
## expr -> expr . EQEQ expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COLON AND ADD ]
## expr -> expr . NEQ expr [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COLON AND ADD ]
## expr -> expr . DOT IDENT [ SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LSQUARE LPAR UNIT COLON FALSE RPAR COMMA LPAR WITH
##
## Ends in an error in state: 186.
##
## emap_element -> LPAR . expr COLON expr RPAR [ RSQUARE COMMA ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LSQUARE LPAR UNIT COLON FALSE RPAR COMMA WITH
##
## Ends in an error in state: 185.
##
## separated_nonempty_list(COMMA,emap_element) -> emap_element COMMA . separated_nonempty_list(COMMA,emap_element) [ RSQUARE ]
##
## The known suffix of the stack is as follows:
## emap_element COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LSQUARE LPAR UNIT COLON FALSE RPAR WITH
##
## Ends in an error in state: 184.
##
## separated_nonempty_list(COMMA,emap_element) -> emap_element . [ RSQUARE ]
## separated_nonempty_list(COMMA,emap_element) -> emap_element . COMMA separated_nonempty_list(COMMA,emap_element) [ RSQUARE ]
##
## The known suffix of the stack is as follows:
## emap_element
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LSQUARE LPAR UNIT COLON IDENT WITH
##
## Ends in an error in state: 177.
##
## expr -> IDENT . [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## ident -> IDENT . [ RPAR LAMBDA CONTRACT CONT ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LSQUARE LPAR UNIT COLON LPAR IDENT WITH
##
## Ends in an error in state: 176.
##
## expr -> IDENT . [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## ident -> IDENT . [ RPAR LAMBDA CONTRACT CONT COMMA ]
## parameter -> IDENT . COLON type_sig [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LSQUARE LPAR UNIT COLON LPAR WITH
##
## Ends in an error in state: 175.
##
## expr -> LPAR . expr COMMA separated_nonempty_list(COMMA,expr) RPAR [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> LPAR . separated_nonempty_list(COMMA,parameter) RPAR LAMBDAB LPAR expr RPAR [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> LPAR . expr RPAR [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> LPAR . expr COLON type_sig RPAR [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## type_sig -> LPAR . type_sig COMMA separated_nonempty_list(COMMA,type_sig) RPAR [ RPAR LAMBDA CONTRACT CONT COMMA ]
## type_sig -> LPAR . type_sig RPAR [ RPAR LAMBDA CONTRACT CONT COMMA ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LSQUARE LPAR UNIT COLON UNIT WITH
##
## Ends in an error in state: 178.
##
## emap_element -> LPAR expr COLON expr . RPAR [ RSQUARE COMMA ]
## expr -> expr . ADD expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . SUB expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DIV expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MUL expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MOD expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . AND expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . OR expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LT expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LTE expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GT expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GTE expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . EQEQ expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . NEQ expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DOT IDENT [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAR expr COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LSQUARE LPAR UNIT COLON WITH
##
## Ends in an error in state: 174.
##
## emap_element -> LPAR expr COLON . expr RPAR [ RSQUARE COMMA ]
## expr -> LPAR expr COLON . type_sig RPAR [ SUB RSQUARE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAR expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LSQUARE LPAR UNIT WITH
##
## Ends in an error in state: 173.
##
## emap_element -> LPAR expr . COLON expr RPAR [ RSQUARE COMMA ]
## expr -> LPAR expr . COMMA separated_nonempty_list(COMMA,expr) RPAR [ SUB RSQUARE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> expr . ADD expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . SUB expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DIV expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MUL expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MOD expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . AND expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . OR expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LT expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LTE expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GT expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GTE expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . EQEQ expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . NEQ expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
## expr -> LPAR expr . RPAR [ SUB RSQUARE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> LPAR expr . COLON type_sig RPAR [ SUB RSQUARE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> expr . DOT IDENT [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LSQUARE LPAR WITH
##
## Ends in an error in state: 100.
##
## emap_element -> LPAR . expr COLON expr RPAR [ RSQUARE COMMA ]
## expr -> LPAR . expr COMMA separated_nonempty_list(COMMA,expr) RPAR [ SUB RSQUARE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> LPAR . separated_nonempty_list(COMMA,parameter) RPAR LAMBDAB LPAR expr RPAR [ SUB RSQUARE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> LPAR . expr RPAR [ SUB RSQUARE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> LPAR . expr COLON type_sig RPAR [ SUB RSQUARE OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LSQUARE UNIT COMMA WITH
##
## Ends in an error in state: 148.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RSQUARE RPAR ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LSQUARE UNIT RPAR
##
## Ends in an error in state: 182.
##
## expr -> LSQUARE loption(separated_nonempty_list(COMMA,expr)) . RSQUARE [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LSQUARE loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 133, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr 
## In state 130, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LSQUARE UNIT WITH
##
## Ends in an error in state: 133.
##
## expr -> expr . ADD expr [ SUB RSQUARE RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> expr . SUB expr [ SUB RSQUARE RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> expr . DIV expr [ SUB RSQUARE RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> expr . MUL expr [ SUB RSQUARE RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> expr . MOD expr [ SUB RSQUARE RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> expr . AND expr [ SUB RSQUARE RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> expr . OR expr [ SUB RSQUARE RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> expr . LT expr [ SUB RSQUARE RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> expr . LTE expr [ SUB RSQUARE RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> expr . GT expr [ SUB RSQUARE RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> expr . GTE expr [ SUB RSQUARE RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> expr . EQEQ expr [ SUB RSQUARE RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> expr . NEQ expr [ SUB RSQUARE RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SUB RSQUARE RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## expr -> expr . DOT IDENT [ SUB RSQUARE RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV COMMA AND ADD ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RSQUARE RPAR ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RSQUARE RPAR ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ LSQUARE WITH
##
## Ends in an error in state: 99.
##
## expr -> LSQUARE . loption(separated_nonempty_list(COMMA,expr)) RSQUARE [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> LSQUARE . separated_nonempty_list(COMMA,emap_element) RSQUARE [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ MATCH UNIT VAR
##
## Ends in an error in state: 190.
##
## expr -> expr . ADD expr [ WITH SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . SUB expr [ WITH SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DIV expr [ WITH SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MUL expr [ WITH SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MOD expr [ WITH SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . AND expr [ WITH SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . OR expr [ WITH SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LT expr [ WITH SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LTE expr [ WITH SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GT expr [ WITH SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GTE expr [ WITH SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . EQEQ expr [ WITH SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . NEQ expr [ WITH SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> MATCH expr . WITH nonempty_list(match_case) [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ WITH SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DOT IDENT [ WITH SUB OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## MATCH expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ MATCH UNIT WITH PIPE UNIT LAMBDA UNIT VAR
##
## Ends in an error in state: 195.
##
## expr -> expr . ADD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . SUB expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DIV expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MUL expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MOD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . AND expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . OR expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . EQEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . NEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## match_case -> PIPE expr LAMBDA expr . [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## PIPE expr LAMBDA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ MATCH UNIT WITH PIPE UNIT LAMBDA WITH
##
## Ends in an error in state: 194.
##
## match_case -> PIPE expr LAMBDA . expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## PIPE expr LAMBDA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ MATCH UNIT WITH PIPE UNIT WITH
##
## Ends in an error in state: 193.
##
## expr -> expr . ADD expr [ SUB OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . SUB expr [ SUB OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DIV expr [ SUB OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MUL expr [ SUB OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MOD expr [ SUB OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . AND expr [ SUB OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . OR expr [ SUB OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LT expr [ SUB OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LTE expr [ SUB OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GT expr [ SUB OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GTE expr [ SUB OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . EQEQ expr [ SUB OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . NEQ expr [ SUB OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SUB OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DOT IDENT [ SUB OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ DOT DIV AND ADD ]
## match_case -> PIPE expr . LAMBDA expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## PIPE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ MATCH UNIT WITH PIPE WITH
##
## Ends in an error in state: 192.
##
## match_case -> PIPE . expr LAMBDA expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ MATCH UNIT WITH WITH
##
## Ends in an error in state: 191.
##
## expr -> MATCH expr WITH . nonempty_list(match_case) [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## MATCH expr WITH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ MATCH WITH
##
## Ends in an error in state: 98.
##
## expr -> MATCH . expr WITH nonempty_list(match_case) [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## MATCH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ NOT UNIT VAR
##
## Ends in an error in state: 199.
##
## expr -> expr . ADD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . SUB expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DIV expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MUL expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MOD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . AND expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . OR expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> NOT expr . [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . EQEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . NEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## NOT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ NOT WITH
##
## Ends in an error in state: 94.
##
## expr -> NOT . expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## NOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ SOME LPAR UNIT WITH
##
## Ends in an error in state: 200.
##
## expr -> SOME LPAR expr . RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . ADD expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . SUB expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DIV expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MUL expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MOD expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . AND expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . OR expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LT expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LTE expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GT expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GTE expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . EQEQ expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . NEQ expr [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DOT IDENT [ SUB RPAR OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## SOME LPAR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ SOME LPAR WITH
##
## Ends in an error in state: 93.
##
## expr -> SOME LPAR . expr RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## SOME LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ SOME WITH
##
## Ends in an error in state: 92.
##
## expr -> SOME . LPAR expr RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## SOME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ TEZOS DOT WITH
##
## Ends in an error in state: 89.
##
## expr -> TEZOS DOT . IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## TEZOS DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ TEZOS WITH
##
## Ends in an error in state: 88.
##
## expr -> TEZOS . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## TEZOS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ THIS DOT WITH
##
## Ends in an error in state: 86.
##
## expr -> THIS DOT . IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## THIS DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ THIS WITH
##
## Ends in an error in state: 85.
##
## expr -> THIS . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## THIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT ADD UNIT VAR
##
## Ends in an error in state: 147.
##
## expr -> expr . ADD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr ADD expr . [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . SUB expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DIV expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MUL expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MOD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . AND expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . OR expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . EQEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . NEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr ADD expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT ADD WITH
##
## Ends in an error in state: 146.
##
## expr -> expr ADD . expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr ADD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT AND UNIT VAR
##
## Ends in an error in state: 145.
##
## expr -> expr . ADD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . SUB expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DIV expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MUL expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MOD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . AND expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr AND expr . [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . OR expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . EQEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . NEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr AND expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT AND WITH
##
## Ends in an error in state: 144.
##
## expr -> expr AND . expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT DIV UNIT VAR
##
## Ends in an error in state: 143.
##
## expr -> expr . ADD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . SUB expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DIV expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr DIV expr . [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MUL expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MOD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . AND expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . OR expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . EQEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . NEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr DIV expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT DIV WITH
##
## Ends in an error in state: 142.
##
## expr -> expr DIV . expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT DOT WITH
##
## Ends in an error in state: 140.
##
## expr -> expr DOT . IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT EQEQ UNIT VAR
##
## Ends in an error in state: 139.
##
## expr -> expr . ADD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . SUB expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DIV expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MUL expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MOD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . AND expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . OR expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . EQEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr EQEQ expr . [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . NEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr EQEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT EQEQ WITH
##
## Ends in an error in state: 138.
##
## expr -> expr EQEQ . expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr EQEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT GT UNIT VAR
##
## Ends in an error in state: 137.
##
## expr -> expr . ADD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . SUB expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DIV expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MUL expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MOD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . AND expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . OR expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr GT expr . [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . EQEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . NEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT GT WITH
##
## Ends in an error in state: 136.
##
## expr -> expr GT . expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT GTE UNIT VAR
##
## Ends in an error in state: 135.
##
## expr -> expr . ADD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . SUB expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DIV expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MUL expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MOD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . AND expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . OR expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr GTE expr . [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . EQEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . NEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GTE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT GTE WITH
##
## Ends in an error in state: 134.
##
## expr -> expr GTE . expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr GTE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT LPAR UNIT RSQUARE
##
## Ends in an error in state: 131.
##
## expr -> expr LPAR loption(separated_nonempty_list(COMMA,expr)) . RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LPAR loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 133, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr 
## In state 130, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT LPAR WITH
##
## Ends in an error in state: 129.
##
## expr -> expr LPAR . loption(separated_nonempty_list(COMMA,expr)) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT LT UNIT VAR
##
## Ends in an error in state: 128.
##
## expr -> expr . ADD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . SUB expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DIV expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MUL expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MOD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . AND expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . OR expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr LT expr . [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . EQEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . NEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT LT WITH
##
## Ends in an error in state: 127.
##
## expr -> expr LT . expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT LTE UNIT VAR
##
## Ends in an error in state: 126.
##
## expr -> expr . ADD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . SUB expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DIV expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MUL expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MOD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . AND expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . OR expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr LTE expr . [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . EQEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . NEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LTE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT LTE WITH
##
## Ends in an error in state: 125.
##
## expr -> expr LTE . expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr LTE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT MOD UNIT VAR
##
## Ends in an error in state: 124.
##
## expr -> expr . ADD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . SUB expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DIV expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MUL expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MOD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr MOD expr . [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . AND expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . OR expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . EQEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . NEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MOD expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT MOD WITH
##
## Ends in an error in state: 123.
##
## expr -> expr MOD . expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT MUL UNIT VAR
##
## Ends in an error in state: 122.
##
## expr -> expr . ADD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . SUB expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DIV expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MUL expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr MUL expr . [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MOD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . AND expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . OR expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . EQEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . NEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MUL expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT MUL WITH
##
## Ends in an error in state: 121.
##
## expr -> expr MUL . expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr MUL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT NEQ UNIT VAR
##
## Ends in an error in state: 120.
##
## expr -> expr . ADD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . SUB expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DIV expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MUL expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MOD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . AND expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . OR expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . EQEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . NEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr NEQ expr . [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr NEQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT NEQ WITH
##
## Ends in an error in state: 119.
##
## expr -> expr NEQ . expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr NEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT OR UNIT VAR
##
## Ends in an error in state: 118.
##
## expr -> expr . ADD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . SUB expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DIV expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MUL expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MOD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . AND expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . OR expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr OR expr . [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . EQEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . NEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr OR expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT OR WITH
##
## Ends in an error in state: 117.
##
## expr -> expr OR . expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr OR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT SUB UNIT VAR
##
## Ends in an error in state: 116.
##
## expr -> expr . ADD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . SUB expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr SUB expr . [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DIV expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MUL expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . MOD expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . AND expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . OR expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GT expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . GTE expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . EQEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . NEQ expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
## expr -> expr . DOT IDENT [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr SUB expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT SUB WITH
##
## Ends in an error in state: 115.
##
## expr -> expr SUB . expr [ WITH THEN SUB SEMICOLON RSQUARE RPAR RBRACE PIPE OR NEQ MUL MOD LTE LT LPAR LAMBDA GTE GT EQEQ ELSE DOT DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## expr SUB
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ UNIT WITH
##
## Ends in an error in state: 308.
##
## dconst -> CONST IDENT COLON type_expr EQ expr . SEMICOLON [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
## expr -> expr . ADD expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . SUB expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DIV expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MUL expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MOD expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . AND expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . OR expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LT expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LTE expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GT expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GTE expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . EQEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . NEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DOT IDENT [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## CONST IDENT COLON type_expr EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT EQ WITH
##
## Ends in an error in state: 307.
##
## dconst -> CONST IDENT COLON type_expr EQ . expr SEMICOLON [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## CONST IDENT COLON type_expr EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT SEMICOLON
##
## Ends in an error in state: 306.
##
## dconst -> CONST IDENT COLON type_expr . EQ expr SEMICOLON [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
## type_sig -> type_expr . CONT [ LAMBDA EQ CONTRACT CONT ]
## type_sig -> type_expr . CONTRACT [ LAMBDA EQ CONTRACT CONT ]
##
## The known suffix of the stack is as follows:
## CONST IDENT COLON type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 206, spurious reduction of production type_expr -> type_sig 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON IDENT WITH
##
## Ends in an error in state: 206.
##
## type_expr -> type_sig . [ SEMICOLON EQ CONTRACT CONT ]
## type_sig -> type_sig . LAMBDA type_sig [ SEMICOLON LAMBDA EQ CONTRACT CONT ]
##
## The known suffix of the stack is as follows:
## type_sig
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT COLON WITH
##
## Ends in an error in state: 305.
##
## dconst -> CONST IDENT COLON . type_expr EQ expr SEMICOLON [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## CONST IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST IDENT WITH
##
## Ends in an error in state: 304.
##
## dconst -> CONST IDENT . COLON type_expr EQ expr SEMICOLON [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## CONST IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONST WITH
##
## Ends in an error in state: 303.
##
## dconst -> CONST . IDENT COLON type_expr EQ expr SEMICOLON [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT IMPLEMENTS IDENT LBRACE WITH
##
## Ends in an error in state: 300.
##
## dcontract -> CONTRACT IDENT IMPLEMENTS IDENT LBRACE . dcontract_body RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## CONTRACT IDENT IMPLEMENTS IDENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT IMPLEMENTS IDENT WITH
##
## Ends in an error in state: 299.
##
## dcontract -> CONTRACT IDENT IMPLEMENTS IDENT . LBRACE dcontract_body RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## CONTRACT IDENT IMPLEMENTS IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT IMPLEMENTS WITH
##
## Ends in an error in state: 298.
##
## dcontract -> CONTRACT IDENT IMPLEMENTS . IDENT LBRACE dcontract_body RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## CONTRACT IDENT IMPLEMENTS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE CONSTRUCTOR LPAR RPAR LBRACE RBRACE WITH
##
## Ends in an error in state: 291.
##
## dcontract_body -> list(terminated(dcontract_field,SEMICOLON)) dcontract_constructor . list(dcontract_entry) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## list(terminated(dcontract_field,SEMICOLON)) dcontract_constructor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE CONSTRUCTOR LPAR RPAR LBRACE THIS DOT IDENT EQ FALSE SEMICOLON WITH
##
## Ends in an error in state: 286.
##
## list(dcontract_constructor_assign) -> dcontract_constructor_assign . list(dcontract_constructor_assign) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## dcontract_constructor_assign
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE CONSTRUCTOR LPAR RPAR LBRACE THIS DOT IDENT EQ UNIT WITH
##
## Ends in an error in state: 282.
##
## dcontract_constructor_assign -> THIS DOT IDENT EQ expr . SEMICOLON [ THIS RBRACE ]
## expr -> expr . ADD expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . SUB expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DIV expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MUL expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MOD expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . AND expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . OR expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LT expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LTE expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GT expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GTE expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . EQEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . NEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DOT IDENT [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## THIS DOT IDENT EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE CONSTRUCTOR LPAR RPAR LBRACE THIS DOT IDENT EQ WITH
##
## Ends in an error in state: 281.
##
## dcontract_constructor_assign -> THIS DOT IDENT EQ . expr SEMICOLON [ THIS RBRACE ]
##
## The known suffix of the stack is as follows:
## THIS DOT IDENT EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE CONSTRUCTOR LPAR RPAR LBRACE THIS DOT IDENT WITH
##
## Ends in an error in state: 280.
##
## dcontract_constructor_assign -> THIS DOT IDENT . EQ expr SEMICOLON [ THIS RBRACE ]
##
## The known suffix of the stack is as follows:
## THIS DOT IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE CONSTRUCTOR LPAR RPAR LBRACE THIS DOT WITH
##
## Ends in an error in state: 279.
##
## dcontract_constructor_assign -> THIS DOT . IDENT EQ expr SEMICOLON [ THIS RBRACE ]
##
## The known suffix of the stack is as follows:
## THIS DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE CONSTRUCTOR LPAR RPAR LBRACE THIS WITH
##
## Ends in an error in state: 278.
##
## dcontract_constructor_assign -> THIS . DOT IDENT EQ expr SEMICOLON [ THIS RBRACE ]
##
## The known suffix of the stack is as follows:
## THIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE CONSTRUCTOR LPAR RPAR LBRACE WITH
##
## Ends in an error in state: 277.
##
## dcontract_constructor -> CONSTRUCTOR LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR LBRACE . list(dcontract_constructor_assign) RBRACE [ RBRACE ENTRY ]
##
## The known suffix of the stack is as follows:
## CONSTRUCTOR LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE CONSTRUCTOR LPAR RPAR WITH
##
## Ends in an error in state: 276.
##
## dcontract_constructor -> CONSTRUCTOR LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR . LBRACE list(dcontract_constructor_assign) RBRACE [ RBRACE ENTRY ]
##
## The known suffix of the stack is as follows:
## CONSTRUCTOR LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE CONSTRUCTOR LPAR WITH
##
## Ends in an error in state: 274.
##
## dcontract_constructor -> CONSTRUCTOR LPAR . loption(separated_nonempty_list(COMMA,parameter)) RPAR LBRACE list(dcontract_constructor_assign) RBRACE [ RBRACE ENTRY ]
##
## The known suffix of the stack is as follows:
## CONSTRUCTOR LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE CONSTRUCTOR WITH
##
## Ends in an error in state: 273.
##
## dcontract_constructor -> CONSTRUCTOR . LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR LBRACE list(dcontract_constructor_assign) RBRACE [ RBRACE ENTRY ]
##
## The known suffix of the stack is as follows:
## CONSTRUCTOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE ENTRY IDENT LPAR RPAR LBRACE RBRACE WITH
##
## Ends in an error in state: 289.
##
## list(dcontract_entry) -> dcontract_entry . list(dcontract_entry) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## dcontract_entry
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE ENTRY IDENT LPAR RPAR LBRACE WITH
##
## Ends in an error in state: 270.
##
## dcontract_entry -> ENTRY IDENT LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR LBRACE . fun_body RBRACE [ RBRACE ENTRY ]
##
## The known suffix of the stack is as follows:
## ENTRY IDENT LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE ENTRY IDENT LPAR RPAR WITH
##
## Ends in an error in state: 269.
##
## dcontract_entry -> ENTRY IDENT LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR . LBRACE fun_body RBRACE [ RBRACE ENTRY ]
##
## The known suffix of the stack is as follows:
## ENTRY IDENT LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE ENTRY IDENT LPAR WITH
##
## Ends in an error in state: 267.
##
## dcontract_entry -> ENTRY IDENT LPAR . loption(separated_nonempty_list(COMMA,parameter)) RPAR LBRACE fun_body RBRACE [ RBRACE ENTRY ]
##
## The known suffix of the stack is as follows:
## ENTRY IDENT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE ENTRY IDENT WITH
##
## Ends in an error in state: 266.
##
## dcontract_entry -> ENTRY IDENT . LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR LBRACE fun_body RBRACE [ RBRACE ENTRY ]
##
## The known suffix of the stack is as follows:
## ENTRY IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE ENTRY WITH
##
## Ends in an error in state: 265.
##
## dcontract_entry -> ENTRY . IDENT LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR LBRACE fun_body RBRACE [ RBRACE ENTRY ]
##
## The known suffix of the stack is as follows:
## ENTRY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE FIELD IDENT COLON IDENT SEMICOLON WITH
##
## Ends in an error in state: 294.
##
## list(terminated(dcontract_field,SEMICOLON)) -> dcontract_field SEMICOLON . list(terminated(dcontract_field,SEMICOLON)) [ RBRACE ENTRY CONSTRUCTOR ]
##
## The known suffix of the stack is as follows:
## dcontract_field SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE FIELD IDENT COLON IDENT WITH
##
## Ends in an error in state: 263.
##
## dcontract_field -> FIELD IDENT COLON type_sig . [ SEMICOLON ]
## type_expr -> type_sig . [ CONTRACT CONT ]
## type_sig -> type_sig . LAMBDA type_sig [ SEMICOLON LAMBDA CONTRACT CONT ]
##
## The known suffix of the stack is as follows:
## FIELD IDENT COLON type_sig
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE FIELD IDENT COLON WITH
##
## Ends in an error in state: 262.
##
## dcontract_field -> FIELD IDENT COLON . type_sig [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## FIELD IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE FIELD IDENT WITH
##
## Ends in an error in state: 261.
##
## dcontract_field -> FIELD IDENT . COLON type_sig [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## FIELD IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE FIELD WITH
##
## Ends in an error in state: 260.
##
## dcontract_field -> FIELD . IDENT COLON type_sig [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## FIELD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT LBRACE WITH
##
## Ends in an error in state: 259.
##
## dcontract -> CONTRACT IDENT LBRACE . dcontract_body RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## CONTRACT IDENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT IDENT WITH
##
## Ends in an error in state: 258.
##
## dcontract -> CONTRACT IDENT . IMPLEMENTS IDENT LBRACE dcontract_body RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
## dcontract -> CONTRACT IDENT . LBRACE dcontract_body RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## CONTRACT IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: CONTRACT WITH
##
## Ends in an error in state: 257.
##
## dcontract -> CONTRACT . IDENT IMPLEMENTS IDENT LBRACE dcontract_body RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
## dcontract -> CONTRACT . IDENT LBRACE dcontract_body RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## CONTRACT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR IDENT COLON IDENT COMMA WITH
##
## Ends in an error in state: 53.
##
## separated_nonempty_list(COMMA,parameter) -> parameter COMMA . separated_nonempty_list(COMMA,parameter) [ RPAR ]
##
## The known suffix of the stack is as follows:
## parameter COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR IDENT COLON IDENT SEMICOLON
##
## Ends in an error in state: 52.
##
## separated_nonempty_list(COMMA,parameter) -> parameter . [ RPAR ]
## separated_nonempty_list(COMMA,parameter) -> parameter . COMMA separated_nonempty_list(COMMA,parameter) [ RPAR ]
##
## The known suffix of the stack is as follows:
## parameter
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 37, spurious reduction of production parameter -> IDENT COLON type_sig 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR IDENT COLON IDENT WITH
##
## Ends in an error in state: 37.
##
## parameter -> IDENT COLON type_sig . [ SEMICOLON RPAR RBRACE COMMA ]
## type_expr -> type_sig . [ CONTRACT CONT ]
## type_sig -> type_sig . LAMBDA type_sig [ SEMICOLON RPAR RBRACE LAMBDA CONTRACT CONT COMMA ]
##
## The known suffix of the stack is as follows:
## IDENT COLON type_sig
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR IDENT COLON WITH
##
## Ends in an error in state: 12.
##
## parameter -> IDENT COLON . type_sig [ SEMICOLON RPAR RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR IDENT WITH
##
## Ends in an error in state: 11.
##
## parameter -> IDENT . COLON type_sig [ SEMICOLON RPAR RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE CONST IDENT COLON IDENT EQ UNIT WITH
##
## Ends in an error in state: 236.
##
## expr -> expr . ADD expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . SUB expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DIV expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MUL expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MOD expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . AND expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . OR expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LT expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LTE expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GT expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GTE expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . EQEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . NEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DOT IDENT [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## statement -> CONST IDENT COLON type_expr EQ expr . SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## CONST IDENT COLON type_expr EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE CONST IDENT COLON IDENT EQ WITH
##
## Ends in an error in state: 235.
##
## statement -> CONST IDENT COLON type_expr EQ . expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## CONST IDENT COLON type_expr EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE CONST IDENT COLON IDENT SEMICOLON
##
## Ends in an error in state: 234.
##
## statement -> CONST IDENT COLON type_expr . EQ expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
## type_sig -> type_expr . CONT [ LAMBDA EQ CONTRACT CONT ]
## type_sig -> type_expr . CONTRACT [ LAMBDA EQ CONTRACT CONT ]
##
## The known suffix of the stack is as follows:
## CONST IDENT COLON type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 206, spurious reduction of production type_expr -> type_sig 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE CONST IDENT COLON WITH
##
## Ends in an error in state: 233.
##
## statement -> CONST IDENT COLON . type_expr EQ expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## CONST IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE CONST IDENT WITH
##
## Ends in an error in state: 232.
##
## statement -> CONST IDENT . COLON type_expr EQ expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## CONST IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE CONST WITH
##
## Ends in an error in state: 231.
##
## statement -> CONST . IDENT COLON type_expr EQ expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE CRYPTO DOT WITH
##
## Ends in an error in state: 229.
##
## left_hand -> CRYPTO DOT . IDENT [ EQ DOT ]
##
## The known suffix of the stack is as follows:
## CRYPTO DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE CRYPTO WITH
##
## Ends in an error in state: 228.
##
## left_hand -> CRYPTO . DOT IDENT [ EQ DOT ]
##
## The known suffix of the stack is as follows:
## CRYPTO
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE IDENT DOT IDENT EQ UNIT WITH
##
## Ends in an error in state: 252.
##
## expr -> expr . ADD expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . SUB expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DIV expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MUL expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MOD expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . AND expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . OR expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LT expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LTE expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GT expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GTE expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . EQEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . NEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DOT IDENT [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## statement -> left_hand DOT ident EQ expr . SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## left_hand DOT ident EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE IDENT DOT IDENT EQ WITH
##
## Ends in an error in state: 251.
##
## statement -> left_hand DOT ident EQ . expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## left_hand DOT ident EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE IDENT DOT IDENT LPAR RPAR WITH
##
## Ends in an error in state: 248.
##
## statement -> left_hand DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR . SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## left_hand DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE IDENT DOT IDENT LPAR UNIT RSQUARE
##
## Ends in an error in state: 247.
##
## statement -> left_hand DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) . RPAR SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## left_hand DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 133, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr 
## In state 130, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE IDENT DOT IDENT LPAR WITH
##
## Ends in an error in state: 246.
##
## statement -> left_hand DOT IDENT LPAR . loption(separated_nonempty_list(COMMA,expr)) RPAR SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## left_hand DOT IDENT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE IDENT DOT IDENT WITH
##
## Ends in an error in state: 245.
##
## ident -> IDENT . [ EQ ]
## statement -> left_hand DOT IDENT . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## left_hand DOT IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE IDENT DOT WITH
##
## Ends in an error in state: 244.
##
## statement -> left_hand DOT . ident EQ expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
## statement -> left_hand DOT . IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## left_hand DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE IDENT EQ UNIT WITH
##
## Ends in an error in state: 242.
##
## expr -> expr . ADD expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . SUB expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DIV expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MUL expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MOD expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . AND expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . OR expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LT expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LTE expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GT expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GTE expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . EQEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . NEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DOT IDENT [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## statement -> left_hand EQ expr . SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## left_hand EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE IDENT EQ WITH
##
## Ends in an error in state: 241.
##
## statement -> left_hand EQ . expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## left_hand EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE IDENT LPAR RPAR WITH
##
## Ends in an error in state: 226.
##
## statement -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR . SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE IDENT LPAR UNIT RSQUARE
##
## Ends in an error in state: 225.
##
## statement -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) . RPAR SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## IDENT LPAR loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 133, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr 
## In state 130, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE IDENT LPAR WITH
##
## Ends in an error in state: 224.
##
## statement -> IDENT LPAR . loption(separated_nonempty_list(COMMA,expr)) RPAR SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## IDENT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE IDENT WITH
##
## Ends in an error in state: 223.
##
## left_hand -> IDENT . [ EQ DOT ]
## statement -> IDENT . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE RETURN UNIT WITH
##
## Ends in an error in state: 221.
##
## expr -> expr . ADD expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . SUB expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DIV expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MUL expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MOD expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . AND expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . OR expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LT expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LTE expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GT expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GTE expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . EQEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . NEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DOT IDENT [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## statement -> RETURN expr . SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## RETURN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE RETURN WITH
##
## Ends in an error in state: 220.
##
## statement -> RETURN . expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## RETURN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE SKIP SEMICOLON WITH
##
## Ends in an error in state: 238.
##
## list(statement) -> statement . list(statement) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## statement
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE SKIP WITH
##
## Ends in an error in state: 218.
##
## statement -> SKIP . SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## SKIP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE TEZOS DOT WITH
##
## Ends in an error in state: 216.
##
## left_hand -> TEZOS DOT . IDENT [ EQ DOT ]
##
## The known suffix of the stack is as follows:
## TEZOS DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE TEZOS WITH
##
## Ends in an error in state: 215.
##
## left_hand -> TEZOS . DOT IDENT [ EQ DOT ]
##
## The known suffix of the stack is as follows:
## TEZOS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE THIS DOT IDENT DIV
##
## Ends in an error in state: 240.
##
## statement -> left_hand . EQ expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
## statement -> left_hand . DOT ident EQ expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
## statement -> left_hand . DOT IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## left_hand
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE THIS DOT WITH
##
## Ends in an error in state: 213.
##
## left_hand -> THIS DOT . IDENT [ EQ DOT ]
##
## The known suffix of the stack is as follows:
## THIS DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE THIS WITH
##
## Ends in an error in state: 212.
##
## left_hand -> THIS . DOT IDENT [ EQ DOT ]
##
## The known suffix of the stack is as follows:
## THIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE VAR IDENT COLON IDENT EQ UNIT WITH
##
## Ends in an error in state: 210.
##
## expr -> expr . ADD expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . SUB expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DIV expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MUL expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MOD expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . AND expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . OR expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LT expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LTE expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GT expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GTE expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . EQEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . NEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DOT IDENT [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## statement -> VAR IDENT COLON type_expr EQ expr . SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## VAR IDENT COLON type_expr EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE VAR IDENT COLON IDENT EQ WITH
##
## Ends in an error in state: 209.
##
## statement -> VAR IDENT COLON type_expr EQ . expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## VAR IDENT COLON type_expr EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE VAR IDENT COLON WITH
##
## Ends in an error in state: 205.
##
## statement -> VAR IDENT COLON . type_expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
## statement -> VAR IDENT COLON . type_expr EQ expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## VAR IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE VAR IDENT WITH
##
## Ends in an error in state: 204.
##
## statement -> VAR IDENT . COLON type_expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
## statement -> VAR IDENT . COLON type_expr EQ expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## VAR IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE VAR LPAR IDENT COLON IDENT RPAR EQ UNIT WITH
##
## Ends in an error in state: 202.
##
## expr -> expr . ADD expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . SUB expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DIV expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MUL expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . MOD expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . AND expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . OR expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LT expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LTE expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GT expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . GTE expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . EQEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . NEQ expr [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## expr -> expr . DOT IDENT [ SUB SEMICOLON OR NEQ MUL MOD LTE LT LPAR GTE GT EQEQ DOT DIV AND ADD ]
## statement -> VAR LPAR separated_nonempty_list(COMMA,parameter) RPAR EQ expr . SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## VAR LPAR separated_nonempty_list(COMMA,parameter) RPAR EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE VAR LPAR IDENT COLON IDENT RPAR EQ WITH
##
## Ends in an error in state: 82.
##
## statement -> VAR LPAR separated_nonempty_list(COMMA,parameter) RPAR EQ . expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## VAR LPAR separated_nonempty_list(COMMA,parameter) RPAR EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE VAR LPAR IDENT COLON IDENT RPAR WITH
##
## Ends in an error in state: 81.
##
## statement -> VAR LPAR separated_nonempty_list(COMMA,parameter) RPAR . EQ expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## VAR LPAR separated_nonempty_list(COMMA,parameter) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE VAR LPAR WITH
##
## Ends in an error in state: 79.
##
## statement -> VAR LPAR . separated_nonempty_list(COMMA,parameter) RPAR EQ expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## VAR LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE VAR WITH
##
## Ends in an error in state: 78.
##
## statement -> VAR . IDENT COLON type_expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
## statement -> VAR . IDENT COLON type_expr EQ expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
## statement -> VAR . LPAR separated_nonempty_list(COMMA,parameter) RPAR EQ expr SEMICOLON [ VAR THIS TEZOS SKIP RETURN RBRACE IDENT CRYPTO CONST ]
##
## The known suffix of the stack is as follows:
## VAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT LBRACE WITH
##
## Ends in an error in state: 77.
##
## dfunction -> FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR COLON type_sig LBRACE . fun_body RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR COLON type_sig LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON IDENT WITH
##
## Ends in an error in state: 76.
##
## dfunction -> FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR COLON type_sig . LBRACE fun_body RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
## type_expr -> type_sig . [ CONTRACT CONT ]
## type_sig -> type_sig . LAMBDA type_sig [ LBRACE LAMBDA CONTRACT CONT ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR COLON type_sig
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR COLON WITH
##
## Ends in an error in state: 75.
##
## dfunction -> FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR COLON . type_sig LBRACE fun_body RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR RPAR WITH
##
## Ends in an error in state: 74.
##
## dfunction -> FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR . COLON type_sig LBRACE fun_body RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT LPAR WITH
##
## Ends in an error in state: 72.
##
## dfunction -> FUNCTION IDENT LPAR . loption(separated_nonempty_list(COMMA,parameter)) RPAR COLON type_sig LBRACE fun_body RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION IDENT WITH
##
## Ends in an error in state: 71.
##
## dfunction -> FUNCTION IDENT . LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR COLON type_sig LBRACE fun_body RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: FUNCTION WITH
##
## Ends in an error in state: 70.
##
## dfunction -> FUNCTION . IDENT LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR COLON type_sig LBRACE fun_body RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## FUNCTION
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IMPORT STRING SEMICOLON WITH
##
## Ends in an error in state: 319.
##
## list(dimport) -> dimport . list(dimport) [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## dimport
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IMPORT STRING WITH
##
## Ends in an error in state: 2.
##
## dimport -> IMPORT STRING . SEMICOLON [ TYPE INTERFACE IMPORT FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## IMPORT STRING
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: IMPORT WITH
##
## Ends in an error in state: 1.
##
## dimport -> IMPORT . STRING SEMICOLON [ TYPE INTERFACE IMPORT FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT EXTENDS IDENT LBRACE WITH
##
## Ends in an error in state: 67.
##
## dinterface -> INTERFACE IDENT EXTENDS IDENT LBRACE . list(terminated(signature,SEMICOLON)) RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT EXTENDS IDENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT EXTENDS IDENT WITH
##
## Ends in an error in state: 66.
##
## dinterface -> INTERFACE IDENT EXTENDS IDENT . LBRACE list(terminated(signature,SEMICOLON)) RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT EXTENDS IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT EXTENDS WITH
##
## Ends in an error in state: 65.
##
## dinterface -> INTERFACE IDENT EXTENDS . IDENT LBRACE list(terminated(signature,SEMICOLON)) RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT EXTENDS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE ENTRY IDENT LPAR RPAR MODIFIER WITH
##
## Ends in an error in state: 57.
##
## list(MODIFIER) -> MODIFIER . list(MODIFIER) [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## MODIFIER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE ENTRY IDENT LPAR RPAR SEMICOLON WITH
##
## Ends in an error in state: 61.
##
## list(terminated(signature,SEMICOLON)) -> signature SEMICOLON . list(terminated(signature,SEMICOLON)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## signature SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE ENTRY IDENT LPAR RPAR WITH
##
## Ends in an error in state: 56.
##
## signature -> ENTRY IDENT LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR . list(MODIFIER) [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## ENTRY IDENT LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE ENTRY IDENT LPAR WITH
##
## Ends in an error in state: 50.
##
## signature -> ENTRY IDENT LPAR . loption(separated_nonempty_list(COMMA,parameter)) RPAR list(MODIFIER) [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## ENTRY IDENT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE ENTRY IDENT WITH
##
## Ends in an error in state: 49.
##
## signature -> ENTRY IDENT . LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR list(MODIFIER) [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## ENTRY IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE ENTRY WITH
##
## Ends in an error in state: 48.
##
## signature -> ENTRY . IDENT LPAR loption(separated_nonempty_list(COMMA,parameter)) RPAR list(MODIFIER) [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## ENTRY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE RBRACE WITH
##
## Ends in an error in state: 315.
##
## list(declaration) -> declaration . list(declaration) [ EOF ]
##
## The known suffix of the stack is as follows:
## declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT LBRACE WITH
##
## Ends in an error in state: 47.
##
## dinterface -> INTERFACE IDENT LBRACE . list(terminated(signature,SEMICOLON)) RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE IDENT WITH
##
## Ends in an error in state: 46.
##
## dinterface -> INTERFACE IDENT . LBRACE list(terminated(signature,SEMICOLON)) RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
## dinterface -> INTERFACE IDENT . EXTENDS IDENT LBRACE list(terminated(signature,SEMICOLON)) RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## INTERFACE IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: INTERFACE WITH
##
## Ends in an error in state: 45.
##
## dinterface -> INTERFACE . IDENT LBRACE list(terminated(signature,SEMICOLON)) RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
## dinterface -> INTERFACE . IDENT EXTENDS IDENT LBRACE list(terminated(signature,SEMICOLON)) RBRACE [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQ ENUM LPAR IDENT PIPE WITH
##
## Ends in an error in state: 21.
##
## separated_nonempty_list(PIPE,ident) -> ident PIPE . separated_nonempty_list(PIPE,ident) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ident PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQ ENUM LPAR IDENT WITH
##
## Ends in an error in state: 20.
##
## separated_nonempty_list(PIPE,ident) -> ident . [ RPAR ]
## separated_nonempty_list(PIPE,ident) -> ident . PIPE separated_nonempty_list(PIPE,ident) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQ ENUM LPAR WITH
##
## Ends in an error in state: 16.
##
## type_sig -> ENUM LPAR . loption(separated_nonempty_list(PIPE,ident)) RPAR [ SEMICOLON RPAR RBRACE LBRACE LAMBDA EQ CONTRACT CONT COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQ ENUM WITH
##
## Ends in an error in state: 15.
##
## type_sig -> ENUM . LPAR loption(separated_nonempty_list(PIPE,ident)) RPAR [ SEMICOLON RPAR RBRACE LBRACE LAMBDA EQ CONTRACT CONT COMMA ]
##
## The known suffix of the stack is as follows:
## ENUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQ IDENT LAMBDA IDENT WITH
##
## Ends in an error in state: 26.
##
## type_expr -> type_sig . [ CONTRACT CONT ]
## type_sig -> type_sig . LAMBDA type_sig [ SEMICOLON RPAR RBRACE LBRACE LAMBDA EQ CONTRACT CONT COMMA ]
## type_sig -> type_sig LAMBDA type_sig . [ SEMICOLON RPAR RBRACE LBRACE LAMBDA EQ CONTRACT CONT COMMA ]
##
## The known suffix of the stack is as follows:
## type_sig LAMBDA type_sig
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQ IDENT LAMBDA WITH
##
## Ends in an error in state: 25.
##
## type_sig -> type_sig LAMBDA . type_sig [ SEMICOLON RPAR RBRACE LBRACE LAMBDA EQ CONTRACT CONT COMMA ]
##
## The known suffix of the stack is as follows:
## type_sig LAMBDA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQ IDENT WITH
##
## Ends in an error in state: 43.
##
## dtype -> TYPE IDENT EQ type_sig . SEMICOLON [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
## type_expr -> type_sig . [ CONTRACT CONT ]
## type_sig -> type_sig . LAMBDA type_sig [ SEMICOLON LAMBDA CONTRACT CONT ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT EQ type_sig
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQ LPAR IDENT COMMA IDENT COMMA WITH
##
## Ends in an error in state: 33.
##
## separated_nonempty_list(COMMA,type_sig) -> type_sig COMMA . separated_nonempty_list(COMMA,type_sig) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_sig COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQ LPAR IDENT COMMA IDENT WITH
##
## Ends in an error in state: 32.
##
## separated_nonempty_list(COMMA,type_sig) -> type_sig . [ RPAR ]
## separated_nonempty_list(COMMA,type_sig) -> type_sig . COMMA separated_nonempty_list(COMMA,type_sig) [ RPAR ]
## type_expr -> type_sig . [ CONTRACT CONT ]
## type_sig -> type_sig . LAMBDA type_sig [ RPAR LAMBDA CONTRACT CONT COMMA ]
##
## The known suffix of the stack is as follows:
## type_sig
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQ LPAR IDENT COMMA WITH
##
## Ends in an error in state: 31.
##
## type_sig -> LPAR type_sig COMMA . separated_nonempty_list(COMMA,type_sig) RPAR [ SEMICOLON RPAR RBRACE LBRACE LAMBDA EQ CONTRACT CONT COMMA ]
##
## The known suffix of the stack is as follows:
## LPAR type_sig COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQ LPAR IDENT WITH
##
## Ends in an error in state: 23.
##
## type_expr -> type_sig . [ CONTRACT CONT ]
## type_sig -> LPAR type_sig . COMMA separated_nonempty_list(COMMA,type_sig) RPAR [ SEMICOLON RPAR RBRACE LBRACE LAMBDA EQ CONTRACT CONT COMMA ]
## type_sig -> type_sig . LAMBDA type_sig [ RPAR LAMBDA CONTRACT CONT COMMA ]
## type_sig -> LPAR type_sig . RPAR [ SEMICOLON RPAR RBRACE LBRACE LAMBDA EQ CONTRACT CONT COMMA ]
##
## The known suffix of the stack is as follows:
## LPAR type_sig
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQ LPAR WITH
##
## Ends in an error in state: 13.
##
## type_sig -> LPAR . type_sig COMMA separated_nonempty_list(COMMA,type_sig) RPAR [ SEMICOLON RPAR RBRACE LBRACE LAMBDA EQ CONTRACT CONT COMMA ]
## type_sig -> LPAR . type_sig RPAR [ SEMICOLON RPAR RBRACE LBRACE LAMBDA EQ CONTRACT CONT COMMA ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQ RECORD LBRACE IDENT COLON IDENT RPAR
##
## Ends in an error in state: 40.
##
## separated_nonempty_list(SEMICOLON,parameter) -> parameter . [ RBRACE ]
## separated_nonempty_list(SEMICOLON,parameter) -> parameter . SEMICOLON separated_nonempty_list(SEMICOLON,parameter) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## parameter
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 37, spurious reduction of production parameter -> IDENT COLON type_sig 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQ RECORD LBRACE IDENT COLON IDENT SEMICOLON WITH
##
## Ends in an error in state: 41.
##
## separated_nonempty_list(SEMICOLON,parameter) -> parameter SEMICOLON . separated_nonempty_list(SEMICOLON,parameter) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## parameter SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQ RECORD LBRACE WITH
##
## Ends in an error in state: 10.
##
## type_sig -> RECORD LBRACE . separated_nonempty_list(SEMICOLON,parameter) RBRACE [ SEMICOLON RPAR RBRACE LBRACE LAMBDA EQ CONTRACT CONT COMMA ]
##
## The known suffix of the stack is as follows:
## RECORD LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQ RECORD WITH
##
## Ends in an error in state: 9.
##
## type_sig -> RECORD . LBRACE separated_nonempty_list(SEMICOLON,parameter) RBRACE [ SEMICOLON RPAR RBRACE LBRACE LAMBDA EQ CONTRACT CONT COMMA ]
##
## The known suffix of the stack is as follows:
## RECORD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT EQ WITH
##
## Ends in an error in state: 8.
##
## dtype -> TYPE IDENT EQ . type_sig SEMICOLON [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE IDENT WITH
##
## Ends in an error in state: 7.
##
## dtype -> TYPE IDENT . EQ type_sig SEMICOLON [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: TYPE WITH
##
## Ends in an error in state: 6.
##
## dtype -> TYPE . IDENT EQ type_sig SEMICOLON [ TYPE INTERFACE FUNCTION EOF CONTRACT CONST ]
##
## The known suffix of the stack is as follows:
## TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: WITH
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

